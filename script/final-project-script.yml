Description: >
    Jonas Tosti / Script designed to create the infra structure in AWS for an application called Udagram. 
    This project is part of the Cloud DevOps Engineer Nanodegree Program from Udacity.

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VPCCIDR: 
    Description: Please enter the IP range (CIDR notation) for the VPC
    Type: String
    Default: 10.0.0.0/16

  PrivateSubnet1CIDR:
    Description: IP range (CIDR notation) for the Private Subnet 1
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet2CIDR:
    Description: IP range (CIDR notation) for the Private Subnet 2
    Type: String
    Default: 10.0.2.0/24

  PublicSubnet1CIDR:
    Description: IP range (CIDR notation) for the Public Subnet 1
    Type: String
    Default: 10.0.3.0/24

  PublicSubnet2CIDR:
    Description: IP range (CIDR notation) for the Public Subnet 2
    Type: String
    Default: 10.0.4.0/24

  BucketName:
    Description: Defines the bucket name
    Type: String
    Default: udacity-udagram-bucket-jonas-tosti

Resources:

  ReadS3Role: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: Udagram-Read-S3-Role
      Description: Allows instances to read Udagram S3 Bucket   
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - S3 Read Only Role
  
  UdagramPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: UdagramS3ReadOnlyPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${BucketName}
      Roles:
        - !Ref ReadS3Role
  
  UdagramInstanceProfile1:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: ReadOnlyAcessForIntances
      Roles:
        - !Ref ReadS3Role

  UdagramVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 1
      VpcId: !Ref UdagramVPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 2
      VpcId: !Ref UdagramVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 1
      VpcId: !Ref UdagramVPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 2
      VpcId: !Ref UdagramVPC

  UdagramInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Internet Gateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref UdagramInternetGateway
      VpcId: !Ref UdagramVPC

  ElasticIpAddress1:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIpAddress1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} NatGateway 1

  ElasticIpAddress2:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIpAddress2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} NatGateway 2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref UdagramVPC
      Tags:
      - Key: Name
        Value: Private Route Table 1

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable1

  AssociationPrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref UdagramVPC
      Tags:
      - Key: Name
        Value: Private Route Table 2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
      RouteTableId: !Ref PrivateRouteTable2

  AssociationPrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref UdagramVPC
      Tags:
      - Key: Name
        Value: Public Route Table

  PublicRoute1:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref UdagramInternetGateway
      RouteTableId: !Ref PublicRouteTable

  AssociationPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  AssociationPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ServersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allows inbound access on port 80 and unrestricted outbound traffic
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      VpcId: !Ref UdagramVPC

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allows inbound/outbound traffic on port 80
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      VpcId: !Ref UdagramVPC

  UdagramLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref  UdagramInstanceProfile1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html      
      ImageId: ami-090717c950a5c34d3
      SecurityGroups:
      - Ref: ServersSecurityGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: '10'

  UdagramScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: Udagram-Scaling-Group
      MinSize: "4"
      MaxSize: "6"
      DesiredCapacity: "4"
      HealthCheckGracePeriod: 300
      LaunchConfigurationName:
        Ref: UdagramLaunchConfig
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref UdagramTargetGroup

  UdagramLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup

  UdagramListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: UdagramTargetGroup
      LoadBalancerArn:
        Ref: UdagramLoadBalancer
      Port: '80'
      Protocol: HTTP

  UdagramListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'UdagramTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'UdagramListener'
      Priority: 1

  UdagramTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref UdagramVPC

  UdagramBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private

  UdagramBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'UdagramBucket'
      PolicyDocument:
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref 'UdagramBucket', /*]]

Outputs:
  UdagramLoadBalanceURL:
    Description: The URL to access the Udagram Load Balancer
    Value: !Sub
      - http://${DNS}
      - { DNS: !GetAtt UdagramLoadBalancer.DNSName }
    Export:
      Name: !Sub ${EnvironmentName}-URL